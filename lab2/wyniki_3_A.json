MongoDB shell version v5.0.9
connecting to: mongodb://127.0.0.1:27017/nbd2-mongo?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("d65b1899-5d61-4e7c-b82f-b98bee406994") }
MongoDB server version: 5.0.9
{
	"_batch" : [
		{
			"job" : "Marketing Manager"
		},
		{
			"job" : "Marketing Assistant"
		},
		{
			"job" : "Librarian"
		},
		{
			"job" : "Legal Assistant"
		},
		{
			"job" : "Junior Executive"
		},
		{
			"job" : "Internal Auditor"
		},
		{
			"job" : "Information Systems Manager"
		},
		{
			"job" : "Human Resources Manager"
		},
		{
			"job" : "Human Resources Assistant IV"
		},
		{
			"job" : "Human Resources Assistant III"
		},
		{
			"job" : "Human Resources Assistant II"
		},
		{
			"job" : "Human Resources Assistant I"
		},
		{
			"job" : "Help Desk Technician"
		},
		{
			"job" : "Help Desk Operator"
		},
		{
			"job" : "Health Coach IV"
		},
		{
			"job" : "Health Coach III"
		},
		{
			"job" : "Health Coach II"
		},
		{
			"job" : "Health Coach I"
		},
		{
			"job" : "Graphic Designer"
		},
		{
			"job" : "Geologist IV"
		},
		{
			"job" : "Geologist III"
		},
		{
			"job" : "Geologist II"
		},
		{
			"job" : "Geologist I"
		},
		{
			"job" : "Geological Engineer"
		},
		{
			"job" : "General Manager"
		},
		{
			"job" : "GIS Technical Architect"
		},
		{
			"job" : "Food Chemist"
		},
		{
			"job" : "Financial Analyst"
		},
		{
			"job" : "Financial Advisor"
		},
		{
			"job" : "Executive Secretary"
		},
		{
			"job" : "Environmental Tech"
		},
		{
			"job" : "Environmental Specialist"
		},
		{
			"job" : "Engineer IV"
		},
		{
			"job" : "Engineer III"
		},
		{
			"job" : "Engineer II"
		},
		{
			"job" : "Engineer I"
		},
		{
			"job" : "Electrical Engineer"
		},
		{
			"job" : "Editor"
		},
		{
			"job" : "Director of Sales"
		},
		{
			"job" : "Developer IV"
		},
		{
			"job" : "Developer III"
		},
		{
			"job" : "Developer II"
		},
		{
			"job" : "Developer I"
		},
		{
			"job" : "Desktop Support Technician"
		},
		{
			"job" : "Design Engineer"
		},
		{
			"job" : "Dental Hygienist"
		},
		{
			"job" : "Database Administrator IV"
		},
		{
			"job" : "Database Administrator III"
		},
		{
			"job" : "Database Administrator II"
		},
		{
			"job" : "Database Administrator I"
		},
		{
			"job" : "Data Coordiator"
		},
		{
			"job" : "Cost Accountant"
		},
		{
			"job" : "Computer Systems Analyst IV"
		},
		{
			"job" : "Computer Systems Analyst III"
		},
		{
			"job" : "Computer Systems Analyst II"
		},
		{
			"job" : "Computer Systems Analyst I"
		},
		{
			"job" : "Compensation Analyst"
		},
		{
			"job" : "Community Outreach Specialist"
		},
		{
			"job" : "Clinical Specialist"
		},
		{
			"job" : "Civil Engineer"
		},
		{
			"job" : "Chief Design Engineer"
		},
		{
			"job" : "Chemical Engineer"
		},
		{
			"job" : "Business Systems Development Analyst"
		},
		{
			"job" : "Budget/Accounting Analyst IV"
		},
		{
			"job" : "Budget/Accounting Analyst III"
		},
		{
			"job" : "Budget/Accounting Analyst II"
		},
		{
			"job" : "Budget/Accounting Analyst I"
		},
		{
			"job" : "Biostatistician IV"
		},
		{
			"job" : "Biostatistician III"
		},
		{
			"job" : "Biostatistician II"
		},
		{
			"job" : "Biostatistician I"
		},
		{
			"job" : "Automation Specialist IV"
		},
		{
			"job" : "Automation Specialist III"
		},
		{
			"job" : "Automation Specialist II"
		},
		{
			"job" : "Automation Specialist I"
		},
		{
			"job" : "Associate Professor"
		},
		{
			"job" : "Assistant Professor"
		},
		{
			"job" : "Assistant Media Planner"
		},
		{
			"job" : "Assistant Manager"
		},
		{
			"job" : "Analyst Programmer"
		},
		{
			"job" : "Analog Circuit Design manager"
		},
		{
			"job" : "Administrative Officer"
		},
		{
			"job" : "Administrative Assistant IV"
		},
		{
			"job" : "Administrative Assistant III"
		},
		{
			"job" : "Administrative Assistant II"
		},
		{
			"job" : "Administrative Assistant I"
		},
		{
			"job" : "Actuary"
		},
		{
			"job" : "Accounting Assistant IV"
		},
		{
			"job" : "Accounting Assistant III"
		},
		{
			"job" : "Accounting Assistant II"
		},
		{
			"job" : "Accounting Assistant I"
		},
		{
			"job" : "Accountant IV"
		},
		{
			"job" : "Accountant III"
		},
		{
			"job" : "Accountant II"
		},
		{
			"job" : "Accountant I"
		},
		{
			"job" : "Account Representative IV"
		},
		{
			"job" : "Account Representative III"
		},
		{
			"job" : "Account Representative II"
		},
		{
			"job" : "Account Representative I"
		},
		{
			"job" : "Account Executive"
		},
		{
			"job" : "Account Coordinator"
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong("2820141245628565057"),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "nbd2-mongo.people",
	"_db" : nbd2-mongo,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();

    // The read timestamp of a snapshot read cursor should not change over the lifetime of the
    // cursor.
    if (cmdRes.cursor.atClusterTime) {
        assert.eq(this._atClusterTime, cmdRes.cursor.atClusterTime);
    }
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"getClusterTime" : function() {
    // Return the read timestamp for snapshot reads, or undefined for other readConcern levels.
    return this._atClusterTime;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.getClusterTime() - returns the read timestamp for snapshot reads.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
